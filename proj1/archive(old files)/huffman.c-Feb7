#include <stdio.h>
#include <stdlib.h>
#include "minheap.h"

// Name: Sawyer Bowerman

// The geeks for geeks implementation of the huffman code problem was extremely informative and useful for helping me to figure out how to implement.

// [GFG Influence] Print huffman codes
void printCodes(struct Node* root, int arr[], int top) {
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left, arr, top + 1);
    }

    if (root->right) {
        arr[top] = 1;
        printCodes(root->right, arr, top + 1);
    }

    if (!root->left && !root->right) {
        printf("%c: ", root->inputs);
        for (int i = 0; i < top; i++)
            printf("%d", arr[i]);
        printf("\n");
    }
}

// [GFG Influence] Build the huffman tree structure
struct Node* buildHuffmanTree(int freq[]) {
    struct MinHeap* minHeap = createMinHeap(256);

    // Create initial nodes for chars with freq > 0
    for (int i = 0; i < 256; i++) {
        if (freq[i] != 0) {
            insertMinHeap(minHeap, newNode(i, freq[i]));
        }
    }

    // Combine nodes until only root remains
    while (minHeap->size > 1) {
        struct Node* left = extractMin(minHeap);
        struct Node* right = extractMin(minHeap);

        struct Node* top = newNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        insertMinHeap(minHeap, top);
    }

    return extractMin(minHeap);
}

int main() {
    // Test with very simple string
    char str[] = "test";
    int freq[256] = {0};
    
    // Count frequencies
    for(int i = 0; str[i] != '\0'; i++) {
        freq[str[i]]++;
    }

    // Build tree and print codes
    struct Node* root = buildHuffmanTree(freq);
    printf("Huffman Codes:\n");
    int arr[256] = {0}, top = 0;
    printCodes(root, arr, top);

    return 0;
}